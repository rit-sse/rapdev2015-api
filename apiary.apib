FORMAT: 1A

# cdar
A calendar API.

All endpoints require authorization in the form of an `Authorization` header with value 
`Bearer <token>` where the token can be retrieved from the `/token` endpoint - which is,
of course, exempt from this authorization requirement.

## Design Guidelines
* _Stay RESTful_ - Maintain canonical URLs for all resources and include them in responses.
This is easy to forget to do, but reduces coupling between client and server.
* _Keep it short_ - If a resource is globally uniquely identifiable, it should probably be at the top
level of the API.
* _Keep it sane_ - Required paramaters should be part of the url - avoid required querystring
parameters where possible.
* _Remember method definitions_ - Use `GET` for retreiving resources, `POST` for creating new
resources, `PUT` for replacing/updating a resource, and `DELETE` for removing a resource.
`PATCH` can be useful for objects with many fields requiring frequent updates, but lacks
idempotency so can lead to awkward race conditions, so its use should be minified.
* _Look to others for inspiration_ - For example, https://api.github.com does a lot right.
The [Heroku API Design Guidelines](https://github.com/interagent/http-api-design)
are also a good place to start, even if we won't follow them in full.

## Todos
* Add optional querystring parameters to those types which require filtering over time.
* Add querystring parameters for managing the pagination of results.
* Allow the usage of name slugs alongside ids in most cases.
* Allow for the batching of requests/responses by allowing multiple inputs for ids/slugs.

# Group Identity
Resources related to the identity API

## Identity Collection [/identities]
### List all Identities [GET]
+ Response 200 (application/json)

        [{
          "url": "/identities/1",
          "id": 1, 
          "name": "the-dude",
          "singular": true,
          "members": [{
            "url": "/users/1",
            "id": 1,
            "email": "dude@example.com"
          }]
        }, {
          "url": "/identities/2",
          "id": 2, 
          "name": "rit-sse",
          "singular": false,
          "members": [{
            "url": "/users/1",
            "id": 1,
            "email": "dude@example.com"
          }, {
            "url": "/users/4",
            "id": 4,
            "email": "four@example.com"
          }]
        }]

### Create an Identity [POST]
Creation of an identity assumes that the requesting user will be its first member and owner.
Passing `"singular": true` makes it a single-user indentity.
+ Request (application/json)

        { 
            "name": "rit-sse"
        }

+ Response 201 (application/json)

        { 
            "url": "/identities/2"
            "id": 2, 
            "name": "rit-sse",
            "singular": false,
            "members": [{
                "url": "/users/1",
                "id": 1,
                "email": "dude@example.com"
            }]
        }

## Identity [/identities/{id}]
A single Identity object with all its details

+ Parameters
    + id (required, number, `2`) ... Numeric `id` of the Identity to perform action with. Has example value.

### Retrieve an Identity [GET]
+ Response 200 (application/json)

        { 
            "url": "/identities/2"
            "id": 2, 
            "name": "rit-sse",
            "singular": false,
            "members": [{
                "url": "/users/1",
                "id": 1,
                "email": "dude@example.com"
            }]
        }
        
### Update an Identity [PUT]
+ Request (application/json)

        { 
            "name": "rit-sse",
            "singular": false,
            "members": [1]
        }
        
+ Response 200 (application/json)

        { 
            "url": "/identities/2"
            "id": 2, 
            "name": "rit-sse",
            "singular": false,
            "members": [{
                "url": "/users/1",
                "id": 1,
                "email": "dude@example.com"
            }]
        }

### Remove an Identity [DELETE]
+ Response 204

## Identity membership [/identities/{id}/member/{uid}]
Facilities for adding and removing members from a non-singular identity

+ Parameters
    + id (required, number, `2`) ... Numeric `id` of the Identity to perform action with. Has example value.
    + uid (required, number, `1`) ... Numeric `id` of the User to perform action with. Has example value.


### Add a member [PUT]
+ Response 200 (application/json)

        { 
            "url": "/identities/2"
            "id": 2, 
            "name": "rit-sse",
            "members": [{
                "url": "/users/1",
                "id": 1,
                "email": "dude@example.com"
            }]
        }
        
### Remove a member [DELETE]
+ Response 200 (application/json)

        { 
            "url": "/identities/2"
            "id": 2, 
            "name": "rit-sse",
            "members": [{
                "url": "/users/1",
                "id": 1,
                "email": "dude@example.com"
            }]
        }



# Group Event
Resources related to the events API

## Event Collection [/events]
### Get all events [GET]
+ Response 200 (application/json)

        [{
            "url": "/events/1",
            "id": 1,
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Really cool",
            "tags": [{
                "url": "/tags/2",
                "id": 2,
                "color": "#ff00ff",
                "name": "meeting"
            },{
                "url": "/tags/4",
                "id": 4,
                "color": "#ffeeff",
                "name": "schwaggy"
            }],
            "owner": {
                "url": "/identity/2",
                "id": 2,
                "name": "rit-sse"
            }
        }, {
            "url": "/events/2",
            "id": 2,
            "start_date": "2015-02-14T20:54:49.384Z",
            "stop_date": "2015-02-14T21:54:49.384Z",
            "title": "SSEvents Meeting",
            "description": "Events subcommittee meeting",
            "tags": [{
                "url": "/tags/2",
                "id": 2,
                "color": "#ff00ff",
                "name": "meeting"
            }, {
                "url": "/tags/3",
                "id": 3,
                "color": "#ffee00",
                "name": "events"
            }],
            "owner": {
                "url": "/identity/2",
                "id": 2,
                "name": "rit-sse"
            }
        }]

### Make a new event [POST]
+ Request
    
        {
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Really cool",
            "tags": ["meeting", "schwaggy"],
            "owner": "rit-sse"
        }

+ Response 200 (application/json)

        {
            "url": "/events/1",
            "id": 1,
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Really cool",
            "tags": [{
                "url": "/tags/2",
                "id": 2,
                "color": "#ff00ff",
                "name": "meeting"
            },{
                "url": "/tags/4",
                "id": 4,
                "color": "#1298be",
                "name": "schwaggy"
            }],
            "owner": {
                "url": "/identity/2",
                "id": 2,
                "name": "rit-sse"
            }            
        }
        
## Event [/events/{id}]
Endpoint for interacting with individual events
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Identity to perform action with. Has example value.

### Get an event [GET]
+ Response 200 (application/json)

        {
            "url": "/events/1",
            "id": 1,
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Really cool",
            "tags": [{
                "url": "/tags/2",
                "id": 2,
                "color": "#ff00ff",
                "name": "meeting"
            },{
                "url": "/tags/4",
                "id": 4,
                "color": "#1298be",
                "name": "schwaggy"
            }],
            "owner": {
                "url": "/identity/2",
                "id": 2,
                "name": "rit-sse"
            }
        }
        
### Update an event [PUT]
+ Request (application/json)

        {
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Kinda cool",
            "tags": ["meeting"],
            "owner": "the-dude"
        }

+ Response 200 (application/json)

        {
            "url": "/events/1",
            "id": 1,
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Kinda cool",
            "tags": [{
                "url": "/tags/2",
                "id": 2,
                "color": "#ff00ff",
                "name": "meeting"
            }],
            "owner": {
                "url": "/identity/1",
                "id": 1,
                "name": "the-dude"
            }
        }
        
### Delete an event [DELETE]
+ Response 204

## Tagging events [/events/{id}/tags/{tid}]
Endpoint for adding or removing tags to/from an event

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Event to perform action with. Has example value.
    + tid (required, number, `1`) ... Numeric `id` of the Tag to perform action with. Has example value.
    
### Add a tag to an event [PUT]
+ Response 200 (application/json)

        {
            "url": "/events/1",
            "id": 1,
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Kinda cool",
            "tags": [{
                "url": "/tags/2",
                "id": 2,
                "color": "#ff00ff",
                "name": "meeting"
            }],
            "owner": {
                "url": "/identity/1",
                "id": 1,
                "name": "the-dude"
            }
        }
        
### Remove a tag from an event [DELETE]
+ Response 200 (application/json)

        {
            "url": "/events/1",
            "id": 1,
            "start_date": "2015-01-14T20:54:49.384Z",
            "stop_date": "2015-01-14T21:54:49.384Z",
            "title": "SSE Meeting",
            "description": "Kinda cool",
            "tags": [{
                "url": "/tags/2",
                "id": 2,
                "color": "#ff00ff",
                "name": "meeting"
            }],
            "owner": {
                "url": "/identity/1",
                "id": 1,
                "name": "the-dude"
            }
        }
        
## Event Invitees [/events/{id}/invitees/{iid}]
Endpoint for adding or removing invitees to/from an event

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Event to perform action with. Has example value.
    + iid (required, number, `1`) ... Numeric `id` of the Identity to perform action with. Has example value.
    
### Add an invitee to an event [PUT]
+ Response 204

### Accept or deny an event invite [PATCH]
+ Request (application/json)

        {
            "state": "accepted"
        }

+ Response 204

### Remove an invitee from an event [DELETE]
+ Response 204

## Event reminders [/events/{id}/reminders]
Endpoint for adding or retreiving event reminders 

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Event to perform action with. Has example value.
    

### Get all reminders on an event [GET]
+ Response 200 (application/json)

        [{
            "url": "/events/1/reminders/1",
            "id": 1,
            "minutes_before": 30,
            "type": "email"
        },{
            "url": "/events/1/reminders/2",
            "id": 2,
            "minutes_before": 3,
            "type": "email"
        }]

### Make a reminder [POST]
+ Request (application/json)

        {
            "minutes_before": 30,
            "type": "email"
        }

+ Response 200

        {
            "url": "/events/1/reminders/1",
            "id": 1,        
            "minutes_before": 30,
            "type": "email"
        }
        
## Event reminder management [/events/{id}/reminders/{rid}]
Endpoints for editing or removing event reminders 

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Event to perform action with. Has example value.
    + rid (required, number, `1`) ... Numeric `rid` of the Reminder to perform action with. Has example value.


### Edit a reminder [PUT]
+ Request (application/json)

        {
            "minutes_before": 300,
            "type": "email"
        }
        
+ Response 200 (application/json)

        {
            "url": "/events/1/reminders/1",
            "id": 1,        
            "minutes_before": 300,
            "type": "email"
        }
        
### Remove a reminder [DELETE]
+ Response 204

# Group Todo
Resources related to the todo api

## Todo collection [/todos]
### List all todos [GET]
+ Response 200 (application/json)

        [{
            "url": "/todos/1",
            "id": 1,
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": [{
                "url": "/tags/8",
                "id": 8,
                "color": "#0feef0",
                "name": "api"
            }],
            "owner": {
                "url": "/identities/1",
                "id": 1,
                "name": "the-dude"
            }
        }, {
            "url": "/todos/2",
            "id": 2,
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "complete",
            "topic": "Debate models",
            "tags": [{
                "url": "/tags/9",
                "id": 8,
                "color": "#0f8bf0",
                "name": "models"
            }],
            "owner": {
                "url": "/identities/1",
                "id": 1,
                "name": "the-dude"
            }
        }]

### Make a new todo [POST]
+ Request (application/json)

        {
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": ["api"],
            "owner": "the-dude"
        }
        
+ Response 200 (application/json)

        {
            "url": "/todos/1",
            "id": 1,
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": [{
                "url": "/tags/8",
                "id": 8,
                "color": "#0feef0",
                "name": "api"
            }],
            "owner": {
                "url": "/identities/1",
                "id": 1,
                "name": "the-dude"
            }
        }
        
## Todo [/todos/{id}]
Endpoints for managing todos

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Event to perform action with. Has example value.
    

### Get an individual todo [GET]
+ Response 200 (application/json)

        {
            "url": "/todos/1",
            "id": 1,
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": [{
                "url": "/tags/8",
                "id": 8,
                "color": "#0feef0",
                "name": "api"
            }],
            "owner": {
                "url": "/identities/1",
                "id": 1,
                "name": "the-dude"
            }
        }

### Edit a todo [PUT]
+ Request (application/json)

        {
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": ["api"],
            "owner": "the-dude"
        }

+ Response 200 (application/json)

        {
            "url": "/todos/1",
            "id": 1,
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": [{
                "url": "/tags/8",
                "id": 8,
                "color": "#0feef0",
                "name": "api"
            }],
            "owner": {
                "url": "/identities/1",
                "id": 1,
                "name": "the-dude"
            }
        }
        
### Delete a todo [DELETE]
+ Response 204

## Tagging Todos [/todos/{id}/tags/{tid}]
Endpoints for adding and removing tags from a todo

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Todo to perform action with. Has example value.
    + tid (required, number, `1`) ... Numeric `tid` of the Tag to perform action with. Has example value.

### Add a tag to a todo [PUT]
+ Response 200 (application/json)

        {
            "url": "/todos/1",
            "id": 1,
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": [{
                "url": "/tags/1",
                "id": 1,
                "color": "#ffffff",
                "name": "first"
            },{
                "url": "/tags/8",
                "id": 8,
                "color": "#0feef0",
                "name": "api"
            }],
            "owner": {
                "url": "/identities/1",
                "id": 1,
                "name": "the-dude"
            }
        }
        
### Remove a tag from a todo [DELETE]
+ Response 200 (application/json)

        {
            "url": "/todos/1",
            "id": 1,
            "due_date": "2015-01-14T21:54:49.384Z",
            "state": "in progress",
            "topic": "Write API Documentation",
            "tags": [{{
                "url": "/tags/8",
                "id": 8,
                "color": "#0feef0",
                "name": "api"
            }],
            "owner": {
                "url": "/identities/1",
                "id": 1,
                "name": "the-dude"
            }
        }
        

## Todo reminder management [/todos/{id}/reminders/{rid}]
Endpoints for editing or removing todo reminders 

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Todo to perform action with. Has example value.
    + rid (required, number, `1`) ... Numeric `rid` of the Reminder to perform action with. Has example value.


### Edit a reminder [PUT]
+ Request (application/json)

        {
            "minutes_before": 300,
            "type": "email"
        }
        
+ Response 200 (application/json)

        {
            "url": "/todos/1/reminders/1",
            "id": 1,        
            "minutes_before": 300,
            "type": "email"
        }
        
### Remove a reminder [DELETE]
+ Response 204

# Group Tags
Resources related to tag management
## Tags collection [/tags]
### List all tags [GET]
+ Response 200 (application/json)

        [{
            "url": "/tags/1",
            "id": 1,
            "color": "#ffffff",
            "name": "first"
        },{
            "url": "/tags/2",
            "id": 2,
            "color": "#ff00ff",
            "name": "meeting"
        }]
        
### Make a new tag [POST]
+ Request (application/json)

        {
            "color": "#ff00ff",
            "name": "meeting"
        }

+ Response 200 (application/json)

        {
            "url": "/tags/2",
            "id": 2,
            "color": "#ff00ff",
            "name": "meeting"
        }
        
## Tag management [/tags/{id}]
Endpoints for managing individual tags

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Tag to perform action with. Has example value.


### Find a single tag [GET]
+ Response 200 (application/json)

        {
            "url": "/tags/1",
            "id": 1,
            "color": "#ffffff",
            "name": "first"
        }
        
### Update a tag [PUT]
+ Request (application/json)

        {
            "color": "#ffffff",
            "name": "first"
        }
        
+ Response 200 (application/json)

        {
            "url": "/tags/1",
            "id": 1,
            "color": "#ffffff",
            "name": "first"
        }
        
### Delete a tag [DELETE]
+ Response 204

## Tag subscriber listing [/tags/{id}/subscibers]
Endpoint for finding all subscribers to a tag

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Tag to perform action with. Has example value.
    

### Find all subscribers [GET]
+ Response 200 (application/json)

        [{
          "url": "/identities/1",
          "id": 1, 
          "name": "the-dude",
          "singular": true,
          "members": [{
            "url": "/users/1",
            "id": 1,
            "email": "dude@example.com"
          }]
        }, {
          "url": "/identities/2",
          "id": 2, 
          "name": "rit-sse",
          "singular": false,
          "members": [{
            "url": "/users/1",
            "id": 1,
            "email": "dude@example.com"
          }, {
            "url": "/users/4",
            "id": 4,
            "email": "four@example.com"
          }]
        }]

## Tag subscriber management [/tags/{id}/subscribers/{iid}]
Endpoints for managing tag subscriptions

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Tag to perform action with. Has example value.
    + iid (required, number, `1`) ... Numeric `id` of the Identity to perform action with. Has example value.
   

### Add a subscriber [PUT]
+ Response 204

### Remove a subscriber [DELETE]
+ Response 204

# Group Users
Endpoints for finding information about users
## User management [/users/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the User to perform action with. Has example value.
    

### Find a user [GET]
+ Response 200 (application/json)

        {
            "url": "/users/1",
            "id": 1,
            "email": "dude@example.com"
        }
        
### Update a user [PUT]
+ Request (application/json)

        {
            "email": "the-dude@example.net"
        }
        
+ Response 200 (application/json)

        {
            "url": "/users/1",
            "id": 1,
            "email": "the-dude@example.net"
        }
        
# Group Auth
User authentication endpoint(s)
## Token requests [/token?provider={provider}&token={token}]

+ Parameters
    + provider (required, string, `facebook`) ... One of 'facebook' or 'refresh_token', specifying the provider to verify against and auth with
    + token (string, `facebook-access-token`) ... The OAuth token provided by a provider on successful login, used to verify user

### Request a token [GET]
+ Response 200 (application/json)

        {
            "token": "some-really-long-token",
            "exp": "2015-01-14T21:54:49.384Z"
        }

